@startuml

package {

interface HttpServlet {
    # doGet(): void
    # doPost(): void
}

class Top extends HttpServlet {
    # doGet(): void
    # doPost(): void
}

note bottom of Top
訪問したときに一番最初に見せる。
出来たらランキングと置き換え
end note
class LoginServlet extends HttpServlet {
    # doGet(): void
    # doPost(): void
}

note bottom of LoginServlet
ログインを行う
end note

class LogoutServlet extends HttpServlet {
    # doGet(): void
}

note bottom of LogoutServlet
セッションを削除してログアウトする
end note

class AccountCreateServlet extends HttpServlet {
    # doGet(): void
    # doPost(): void
}
note bottom of AccountCreateServlet
アカウントを作成する
end note

class AccountSearchServlet extends HttpServlet {
    # doGet(): void
    # doPost(): void
}
note bottom of AccountSerchServlet
アカウントを検索する。
admin限定
end note

class AccountRemoveServlet extends HttpServlet {
    # doGet(): void
    # doPost(): void
}

class AddCartServlet extends HttpServlet {
    # doGet(): void
    # doPost(): void
}
note bottom of AddCartServlet
カートに商品を追加する
end note

class removeCartServlet extends HttpServlet {
	# doGet(): void
	# doPost(): void
}
note bottom of removeCartServlet
カートから商品を削除する
end note

class OrderServlet extends HttpServlet {
    # doGet(): void
    # doPost(): void
}

note bottom of OrderServlet
カートに保有する商品を購入する
end note

class RankingServlet extends HttpServlet {
    # doGet(): void
    # doPost(): void
}
note bottom of RankingServlet
ランキングを表示する
end note

class ProductServlet extends HttpServlet {
    # doGet(): void
    # doPost(): void
}

class GeneralServlet extends HttpServlet {
    # doGet(): void
    # doPost(): void
}
note bottom of GeneralServlet
一般ユーザーの画面
end note

class AdministratorServlet extends HttpServlet {
    # doGet(): void
    # doPost(): void
}

note bottom of AdministratorServlet
特権ユーザーの画面
end note
}

package model {
class Account {
	- AccountData: accountData
	+ Account(AccountData)
    + login(): boolean
    + logout(): boolean
    + createAccount(): boolean
    + removeAccount(): boolean
    + addCart(): boolean
    + removeCart(): boolean
    + buyCart(): boolean
}

note top of Account
アカウントの保有者が出来るメソッド
end note

class Product {
    + createProduct(product: Product)
    + removeProduct(product: Product)
    + updateProduct(product: Product)
}
note top of Product
商品に対して出来るメソッド
end note

class Order {
	- AccountData: account
	- ProductData: product
	+ Order(account: Account, product: Product)
    + createOrder()
    + removeOrder()
}

note top of Order
購入するメソッド
end note
}
package DAO {
interface DAO<T> {
    + searchAll(): List<T>
    + search(t: T): List<T>
    + create(t: T): boolean
    + remove(t: T): boolean
    + update(t: T): boolean
}

note top of DAO
データーベースにアクセスする
end note

class AccountDAO implements DAO{
    + searchAll(): List<Account>
    + search(account: Account): List<Account>
    + create(account: Account): boolean
    + remove(account: Account): boolean
    + update(account: Account): boolean
}

class ProductDAO implements DAO{
    + searchAll(): List<Product>
    + search(product: Product): List<Product>
    + create(product: Product): boolean
    + remove(product: Product): boolean
    + update(product: Product): boolean
}

class OrderDAO implements DAO {
    + searchAll(): List<Order>
    + search(order: Order): List<Order>
    + create(order: Order): boolean
    + remove(order: Order): boolean
    + update(order: Order): boolean
}
}
package model {
class DataModel {
    - id: int
    - additionalDate: String
    - name: String
    - imagePath: String
    + getId(): int
    + setId(id: int): void
    + getAdditionalDate(): String
    + setAdditionalDate(additionalDate: String): void
    + getName(): String
    + setName(name: String): void
    + getImagePath(): String
    + setImagePath(imagePath: String): void
}

note top of DataModel
データモデルとして使用します
end note

class AccountData extends DataModel {
    - password: String
    - isAdmin: boolean
    + setPassword(password: String): void
    + setIsAdmin(isAdmin: boolean): void
    + getPassword(): String
    + getIsAdmin(): boolean
}

class ProductData extends DataModel {
    - explanation: String
    - price: int
    - stock: int
    - subImagePaths: List<String>
    + getExplanation(): String
    + setExplanation(explanation: String): void
    + getPrice(): int
    + setPrice(price: int): void
    + getStock(): int
    + setStock(stock: int): void
    + getSubImagePaths(): List<String>
    + setSubImagePaths(subImagePaths: List<String>): void
}

class OrderData extends DataModel {
    - accountId: int
    - productId: int
    - pieces: int
    + getAccountId(): int
    + setAccountId(accountId: int): void
    + getProductId(): int
    + setProductId(productId: int): void
    + getPieces(): int
    + setPieces(pieces: int): void
}
}

@enduml
